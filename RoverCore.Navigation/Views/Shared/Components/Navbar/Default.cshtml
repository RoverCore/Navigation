@using RoverCore.Navigation.Models

@model RoverCore.Navigation.Models.NavMenu

@functions
{
    void renderChildren(List<NavMenuItem>? items)
    {
        if (items is null) return; // Nothing to render

        <ul class="nav-block list-unstyled">
            @foreach (var dropdownItem in items)
            {
                if (dropdownItem.Type.ToLower() == "link")
                {
	                var target = !String.IsNullOrEmpty(dropdownItem.Target) ? $"target=\"{dropdownItem.Target}\"" : "";

	                <li class="nav-item">
		                <a class="dropdown-item" href="@dropdownItem.Url" @target>
			                @dropdownItem.Text
		                </a>
	                </li>
                }
                else if (dropdownItem.Type.ToLower() == "dropdown")
                {
                    var collapsenav = dropdownItem.Active ? "" : "collapsed";
                    var shownav = dropdownItem.Active ? "show" : "";

                    <li class="nav-item dropdown">
                        <a class="dropdown-item dropdown-toggle @collapsenav" href="#navbar-base" data-bs-toggle="collapse" data-bs-target="#@dropdownItem.Id" data-bs-auto-close="false" role="button" aria-expanded="false">
                            <span class="nav-link-title">@dropdownItem.Text</span>
                        </a>
                        <div class="dropdown-nested collapse @shownav" id="@dropdownItem.Id">
                            <div class="dropdown-menu-columns">
                                <div class="dropdown-menu-column">
                                    @{
                                        renderChildren(dropdownItem.Children);
                                    }
                                </div>
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    }
}
<div>

    <ul class="navbar-nav pt-lg-3">
        @if (Model?.NavMenuItems != null)
        {
            foreach (var navitem in Model.NavMenuItems)
            {
                navitem.Type ??= "link";

                if (navitem.Type.ToLower() == "link")
                {
                    <li class="nav-item">
                        <a class="nav-link" href="@navitem.Url">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <i class="icon @navitem.Icon"></i>
                            </span>
                            <span class="nav-link-title">@navitem.Text</span>
                        </a>
                    </li>
                }
                else if (navitem.Type.ToLower() == "dropdown")
                {
                    var collapsenav = navitem.Active ? "" : "collapsed"; 
                    var shownav = navitem.Active ? "show" : ""; 

                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle @collapsenav" href="#navbar-base" data-bs-toggle="collapse" data-bs-target="#@navitem.Id" data-bs-auto-close="false" role="button" aria-expanded="false">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <i class="icon @navitem.Icon"></i>
                            </span>
                            <span class="nav-link-title">@navitem.Text</span>
                        </a>
                        <div class="collapse @shownav" id="@navitem.Id">
                            <div class="dropdown-menu-columns">
                                <div class="dropdown-menu-column">
                                    @{
                                        renderChildren(navitem.Children);
                                    }
                                </div>
                            </div>
                        </div>
                    </li>
                }
            }

        }
    </ul>
</div>